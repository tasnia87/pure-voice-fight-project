{"version":3,"sources":["hooks.min.js"],"names":["tinCanny","hooks","action","filter","addAction","callable","priority","tag","addHook","addFilter","doAction","doHook","arguments","applyFilters","removeAction","removeHook","removeFilter","hookType","undefined","length","push","args","Array","prototype","slice","call","hook","sort","a","b","window","i","apply","splice"],"mappings":"AAOA,GAAIA,WACHC,OAASC,UAAYC,WACrBC,UAAW,SAAUF,EAAQG,EAAUC,EAAUC,GAChDP,SAASQ,QAAS,SAAUN,EAAQG,EAAUC,EAAUC,IAEzDE,UAAW,SAAUP,EAAQG,EAAUC,EAAUC,GAChDP,SAASQ,QAAS,SAAUN,EAAQG,EAAUC,EAAUC,IAEzDG,SAAU,SAAUR,GACnBF,SAASW,OAAQ,SAAUT,EAAQU,YAEpCC,aAAc,SAAUX,GACvB,MAAOF,UAASW,OAAQ,SAAUT,EAAQU,YAE3CE,aAAc,SAAUZ,EAAQK,GAC/BP,SAASe,WAAY,SAAUb,EAAQK,IAExCS,aAAc,SAAUd,EAAQI,EAAUC,GACzCP,SAASe,WAAY,SAAUb,EAAQI,EAAUC,IAElDC,QAAS,SAAUS,EAAUf,EAAQG,EAAUC,EAAUC,GACnDW,SAAclB,SAASC,MAAMgB,GAAUf,KAC3CF,SAASC,MAAMgB,GAAUf,MAE1B,IAAID,GAAQD,SAASC,MAAMgB,GAAUf,EAChCgB,UAAcX,IAClBA,EAAML,EAAS,IAAMD,EAAMkB,QAELD,SAAbZ,IACAA,EAAW,IAGfN,SAASC,MAAMgB,GAAUf,GAAQkB,MAAQb,IAAIA,EAAKF,SAASA,EAAUC,SAASA,KAErFK,OAAQ,SAAUM,EAAUf,EAAQmB,GAKnC,GAFMA,EAAOC,MAAMC,UAAUC,MAAMC,KAAKJ,EAAM,GAEzCH,SAAclB,SAASC,MAAMgB,GAAUf,GAAU,CACrD,GAA8CwB,GAA1CzB,EAAQD,SAASC,MAAMgB,GAAUf,EAMrC,IAJAD,EAAM0B,KAAK,SAASC,EAAEC,GACrB,MAAOD,GAAEtB,SAAWuB,EAAEvB,YAGlBwB,OACJ,MAED,KAAK,GAAIC,GAAE,EAAGA,EAAE9B,EAAMkB,OAAQY,IACjBL,EAAOzB,EAAM8B,GAAG1B,SAEE,kBAARqB,IAAsBI,QAAUJ,IAAQI,UAC9CJ,EAAOI,OAAOJ,IACzB,UAAYT,EACDS,EAAKM,MAAM,KAAMX,GAEjBA,EAAK,GAAKK,EAAKM,MAAM,KAAMX,GAI7C,GAAK,UAAYJ,EAChB,MAAOI,GAAK,IAGdN,WAAY,SAAUE,EAAUf,EAAQI,EAAUC,GACjD,GAAKW,SAAclB,SAASC,MAAMgB,GAAUf,GAE3C,IAAK,GADDD,GAAQD,SAASC,MAAMgB,GAAUf,GAC5B6B,EAAE9B,EAAMkB,OAAO,EAAGY,GAAG,EAAGA,IAC3Bb,SAAcX,GAAKA,GAAKN,EAAM8B,GAAGxB,KAASW,SAAYZ,GAAUA,GAAUL,EAAM8B,GAAGzB,UACvFL,EAAMgC,OAAOF,EAAE","file":"hooks.min.js","sourcesContent":["/**\r\n * @package Uncanny TinCan API\r\n * @author Uncanny Owl\r\n * @version 1.0.0\r\n */\r\n\r\n// Hooks\r\nvar tinCanny = {\r\n\thooks: { action: {}, filter: {} },\r\n\taddAction: function( action, callable, priority, tag ) {\r\n\t\ttinCanny.addHook( 'action', action, callable, priority, tag );\r\n\t},\r\n\taddFilter: function( action, callable, priority, tag ) {\r\n\t\ttinCanny.addHook( 'filter', action, callable, priority, tag );\r\n\t},\r\n\tdoAction: function( action ) {\r\n\t\ttinCanny.doHook( 'action', action, arguments );\r\n\t},\r\n\tapplyFilters: function( action ) {\r\n\t\treturn tinCanny.doHook( 'filter', action, arguments );\r\n\t},\r\n\tremoveAction: function( action, tag ) {\r\n\t\ttinCanny.removeHook( 'action', action, tag );\r\n\t},\r\n\tremoveFilter: function( action, priority, tag ) {\r\n\t\ttinCanny.removeHook( 'filter', action, priority, tag );\r\n\t},\r\n\taddHook: function( hookType, action, callable, priority, tag ) {\r\n\t\tif ( undefined === tinCanny.hooks[hookType][action] ) {\r\n\t\t\ttinCanny.hooks[hookType][action] = [];\r\n\t\t}\r\n\t\tvar hooks = tinCanny.hooks[hookType][action];\r\n\t\tif ( undefined === tag ) {\r\n\t\t\ttag = action + '_' + hooks.length;\r\n\t\t}\r\n        if( priority === undefined ){\r\n            priority = 10;\r\n        }\r\n\r\n        tinCanny.hooks[hookType][action].push( { tag:tag, callable:callable, priority:priority } );\r\n\t},\r\n\tdoHook: function( hookType, action, args ) {\r\n\r\n        // splice args from object into array and remove first index which is the hook name\r\n        args = Array.prototype.slice.call(args, 1);\r\n\r\n\t\tif ( undefined !== tinCanny.hooks[hookType][action] ) {\r\n\t\t\tvar hooks = tinCanny.hooks[hookType][action], hook;\r\n\t\t\t//sort by priority\r\n\t\t\thooks.sort(function(a,b) {\r\n\t\t\t\treturn a.priority - b.priority;\r\n\t\t\t});\r\n\r\n\t\t\tif( !window )\r\n\t\t\t\treturn;\r\n\r\n\t\t\tfor( var i=0; i<hooks.length; i++) {\r\n                hook = hooks[i].callable;\r\n\r\n                if(typeof hook != 'function' && window && hook in window )\r\n                    hook = window[hook];\r\n\t\t\t\tif ( 'action' == hookType ) {\r\n                    hook.apply(null, args);\r\n\t\t\t\t} else {\r\n                    args[0] = hook.apply(null, args);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( 'filter' == hookType ) {\r\n\t\t\treturn args[0];\r\n\t\t}\r\n\t},\r\n\tremoveHook: function( hookType, action, priority, tag ) {\r\n\t\tif ( undefined !== tinCanny.hooks[hookType][action] ) {\r\n\t\t\tvar hooks = tinCanny.hooks[hookType][action];\r\n\t\t\tfor( var i=hooks.length-1; i>=0; i--) {\r\n\t\t\t\tif ((undefined === tag||tag==hooks[i].tag) && (undefined===priority||priority==hooks[i].priority)){\r\n\t\t\t\t\thooks.splice(i,1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n"]}